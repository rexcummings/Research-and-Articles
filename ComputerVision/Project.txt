Looking at Computer Vision books and project ideas to pursue.  

Current thought process:

Create a CV project involving Human-Computer interaction using specific tools. 

Setup:
- Linux Mint 17.3 Rosa
- Kinect Depth Sensor (from Xbox 360 Kinect)
- OpenNI 2.2.0.33 Beta (x64) ~ http://openni.ru/openni-sdk/
- NiTE-Linux-x64-2.2.tar ~ https://drive.google.com/file/d/0B3e4...
- OpenCV (Not sure which version yet ... probably 2.4.6)

May need:
- OpenNI2-FreenectDriver ~ https://github.com/OpenKinect/libfreenect/tree/master/OpenNI2-FreenectDriver

Links:
- http://structure.io/openni
- http://openni.ru/openni-sdk/
- http://www.resolvinghere.com/sm/how-to-install-openni-22-nite-22-kinect-sdk-18-windows-7-3264-bit.shtml
- https://www.youtube.com/watch?v=m5uTH3S9P9g
- http://forrestbao.blogspot.com/2014/02/openni2-nite2-freenect-ubuntu-1304.html
- https://help.ubuntu.com/community/OpenCV
- http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation
- http://opencv.org/downloads.html
- https://books.google.com/books?id=VVxbBAAAQBAJ&pg=PA649&lpg=PA649&dq=stable+version+of+opencv+that+works+with+openni+2.2&source=bl&ots=wLXrgTG6Qr&sig=OZS5olpZ2umTq-rlRUaLwRTyFlc&hl=en&sa=X&ved=0ahUKEwiGupSW08XLAhVDFz4KHdz0CQYQ6AEIRjAG#v=onepage&q=stable%20version%20of%20opencv%20that%20works%20with%20openni%202.2&f=false **Go to page 649 for interesting obstable avoidance technique with Openni 2.2 and Kinect

Info:
OpenNI2-FreenectDriver
======================

OpenNI2-FreenectDriver is a bridge to libfreenect implemented as an OpenNI2 driver.
It allows OpenNI2 to use Kinect hardware on Linux and OSX.
OpenNI2-FreenectDriver is distributed under the [Apache 2](https://github.com/OpenKinect/libfreenect/blob/master/APACHE20) license.

Install
-------
1. Download and unpack [OpenNI](http://structure.io/openni) 2.2.0.33 or higher.
2. Go to the top libfreenect directory and build it with the OpenNI2 driver.

        mkdir build
        cd build
        cmake .. -DBUILD_OPENNI2_DRIVER=ON
        make

3. Copy the driver to your OpenNI2 driver repository. You must first change `Repository` to match your project layout.

        Repository="/example/path/to/Samples/Bin/OpenNI2/Drivers/"
        cp -L lib/OpenNI2-FreenectDriver/libFreenectDriver.{so,dylib} ${Repository}
        
        # you could instead make a symlink to avoid copying after every build
        # ln -s lib/OpenNI2-FreenectDriver/libFreenectDriver.{so,dylib} ${Repository}

OpenNI2-FreenectDriver is built with a static libfreenect, so you do not need to include libfreenect when deploying.
However, you will need to make sure target systems have libusb and all other dependencies listed in `ldd libFreenectDriver.so`.

IMPORTANT:

After messing around with the Kinect device driver with libfreenect, I'm fairly positive I know what the problem is. 

Currently, I am running Linux 17.3 Rosa on a virtual machine, so the usb ports/bus only registers for the host OS being Windows 8.1.  Therefore, I aim to use my older laptop which is dedicated to only Linux.  I prefer not to possibly mess up my new laptop, so I'll sacrifice some computing power and use the other laptop.   

UPDATE:

Able to successfully compile by source Linux + Kinect Model 1414 + Openni 2.2 + Nite 2.2 with fully operational
skeleton tracking and detection.  

Next step is to compile OpenCv by source and use it for C++ development.  I've used python extensively, so I'd like to 
balance out my exposure to ComputerVision research with another language.  

In addition, I plan to update the README with the install procedure when I've completed my setup.  
